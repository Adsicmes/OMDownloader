import os

SCRIPT = r"""
; Script generated by the Inno Setup Script Wizard and innoScriptBuilder by FrZ.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "__AppName__"
#define MyAppVersion "__Version__"
#define MyAppPublisher "__Author__"
#define MyAppURL "__URL__"
#define MyAppExeName "__AppName__.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D987D00D-5839-4E11-815A-861D97BF7184}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
LicenseFile=__LicenseFile__
InfoBeforeFile=__InfoBeforeFile__
InfoAfterFile=__InfoAfterFile__
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputDir=__OutputDir__
OutputBaseFilename=__AppName__
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "__ExePath__"; DestDir: "{app}"; Flags: ignoreversion
__SourceAppend__
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

""".strip()

BASEDIR = os.path.dirname(os.path.dirname(__file__))
exec(open(os.path.join(BASEDIR, "appInfo.py")).read())

__ExePath__ = os.path.join(BASEDIR, "release", "pyinstaller", "dist", "main")


def sourceAppend() -> str:
    sourceStr = ""
    for i in os.listdir(__ExePath__):
        if i == f"{__AppName__}.exe":
            continue
        if os.path.isdir(os.path.join(__ExePath__, i)):
            sourceStr += fr"""Source: "{os.path.join(__ExePath__, i)}\*"; DestDir: "{'{app}'}\{i}"; Flags: ignoreversion recursesubdirs createallsubdirs"""
            sourceStr += "\n"
        elif os.path.isfile(os.path.join(__ExePath__, i)):
            sourceStr += fr"""Source: "{os.path.join(__ExePath__, i)}"; DestDir: "{'{app}'}"; Flags: ignoreversion"""
            sourceStr += "\n"
    return sourceStr


script = SCRIPT \
    .replace("__AppName__", __AppName__) \
    .replace("__Version__", __Version__) \
    .replace("__Author__", __Author__) \
    .replace("__URL__", __URL__) \
    .replace("__LicenseFile__", os.path.join(BASEDIR, "LICENSE")) \
    .replace("__InfoBeforeFile__",
             os.path.join(BASEDIR, "devTools", "exePack", "installerPack", "InformationFileBefore.txt")) \
    .replace("__InfoAfterFile__",
             os.path.join(BASEDIR, "devTools", "exePack", "installerPack", "InformationFileAfter.txt")) \
    .replace("__OutputDir__", os.path.join(BASEDIR, "release", "nanoInstaller")) \
    .replace("__ExePath__", os.path.join(__ExePath__, f"{__AppName__}.exe")) \
    .replace("__SourceAppend__", sourceAppend())

with open(os.path.join(BASEDIR, "devTools", "exePack", "installerPack", "innoScript.iss"), "w") as f:
    f.write(script)
